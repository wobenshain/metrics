/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fourtwosix.codahale.metrics.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TimerSnapshot implements org.apache.thrift.TBase<TimerSnapshot, TimerSnapshot._Fields>, java.io.Serializable, Cloneable, Comparable<TimerSnapshot> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimerSnapshot");

  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("mean", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField P50_FIELD_DESC = new org.apache.thrift.protocol.TField("p50", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField P75_FIELD_DESC = new org.apache.thrift.protocol.TField("p75", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField P95_FIELD_DESC = new org.apache.thrift.protocol.TField("p95", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField P98_FIELD_DESC = new org.apache.thrift.protocol.TField("p98", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField P99_FIELD_DESC = new org.apache.thrift.protocol.TField("p99", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField P999_FIELD_DESC = new org.apache.thrift.protocol.TField("p999", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField STD_DEV_FIELD_DESC = new org.apache.thrift.protocol.TField("StdDev", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField M15_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("m15Rate", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField M1_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("m1Rate", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField M5_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("m5Rate", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField MEAN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("meanRate", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField DURATION_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("durationUnits", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField RATE_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("rateUnits", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimerSnapshotStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimerSnapshotTupleSchemeFactory());
  }

  public long count; // required
  public double max; // required
  public double mean; // required
  public double min; // required
  public double p50; // required
  public double p75; // required
  public double p95; // required
  public double p98; // required
  public double p99; // required
  public double p999; // required
  public List<Double> values; // optional
  public double StdDev; // required
  public double m15Rate; // required
  public double m1Rate; // required
  public double m5Rate; // required
  public double meanRate; // required
  public String durationUnits; // required
  public String rateUnits; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNT((short)1, "count"),
    MAX((short)2, "max"),
    MEAN((short)3, "mean"),
    MIN((short)4, "min"),
    P50((short)5, "p50"),
    P75((short)6, "p75"),
    P95((short)7, "p95"),
    P98((short)8, "p98"),
    P99((short)9, "p99"),
    P999((short)10, "p999"),
    VALUES((short)11, "values"),
    STD_DEV((short)12, "StdDev"),
    M15_RATE((short)13, "m15Rate"),
    M1_RATE((short)14, "m1Rate"),
    M5_RATE((short)15, "m5Rate"),
    MEAN_RATE((short)16, "meanRate"),
    DURATION_UNITS((short)17, "durationUnits"),
    RATE_UNITS((short)18, "rateUnits");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNT
          return COUNT;
        case 2: // MAX
          return MAX;
        case 3: // MEAN
          return MEAN;
        case 4: // MIN
          return MIN;
        case 5: // P50
          return P50;
        case 6: // P75
          return P75;
        case 7: // P95
          return P95;
        case 8: // P98
          return P98;
        case 9: // P99
          return P99;
        case 10: // P999
          return P999;
        case 11: // VALUES
          return VALUES;
        case 12: // STD_DEV
          return STD_DEV;
        case 13: // M15_RATE
          return M15_RATE;
        case 14: // M1_RATE
          return M1_RATE;
        case 15: // M5_RATE
          return M5_RATE;
        case 16: // MEAN_RATE
          return MEAN_RATE;
        case 17: // DURATION_UNITS
          return DURATION_UNITS;
        case 18: // RATE_UNITS
          return RATE_UNITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __MAX_ISSET_ID = 1;
  private static final int __MEAN_ISSET_ID = 2;
  private static final int __MIN_ISSET_ID = 3;
  private static final int __P50_ISSET_ID = 4;
  private static final int __P75_ISSET_ID = 5;
  private static final int __P95_ISSET_ID = 6;
  private static final int __P98_ISSET_ID = 7;
  private static final int __P99_ISSET_ID = 8;
  private static final int __P999_ISSET_ID = 9;
  private static final int __STDDEV_ISSET_ID = 10;
  private static final int __M15RATE_ISSET_ID = 11;
  private static final int __M1RATE_ISSET_ID = 12;
  private static final int __M5RATE_ISSET_ID = 13;
  private static final int __MEANRATE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VALUES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEAN, new org.apache.thrift.meta_data.FieldMetaData("mean", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P50, new org.apache.thrift.meta_data.FieldMetaData("p50", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P75, new org.apache.thrift.meta_data.FieldMetaData("p75", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P95, new org.apache.thrift.meta_data.FieldMetaData("p95", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P98, new org.apache.thrift.meta_data.FieldMetaData("p98", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P99, new org.apache.thrift.meta_data.FieldMetaData("p99", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P999, new org.apache.thrift.meta_data.FieldMetaData("p999", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STD_DEV, new org.apache.thrift.meta_data.FieldMetaData("StdDev", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.M15_RATE, new org.apache.thrift.meta_data.FieldMetaData("m15Rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.M1_RATE, new org.apache.thrift.meta_data.FieldMetaData("m1Rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.M5_RATE, new org.apache.thrift.meta_data.FieldMetaData("m5Rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEAN_RATE, new org.apache.thrift.meta_data.FieldMetaData("meanRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DURATION_UNITS, new org.apache.thrift.meta_data.FieldMetaData("durationUnits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE_UNITS, new org.apache.thrift.meta_data.FieldMetaData("rateUnits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimerSnapshot.class, metaDataMap);
  }

  public TimerSnapshot() {
  }

  public TimerSnapshot(
    long count,
    double max,
    double mean,
    double min,
    double p50,
    double p75,
    double p95,
    double p98,
    double p99,
    double p999,
    double StdDev,
    double m15Rate,
    double m1Rate,
    double m5Rate,
    double meanRate,
    String durationUnits,
    String rateUnits)
  {
    this();
    this.count = count;
    setCountIsSet(true);
    this.max = max;
    setMaxIsSet(true);
    this.mean = mean;
    setMeanIsSet(true);
    this.min = min;
    setMinIsSet(true);
    this.p50 = p50;
    setP50IsSet(true);
    this.p75 = p75;
    setP75IsSet(true);
    this.p95 = p95;
    setP95IsSet(true);
    this.p98 = p98;
    setP98IsSet(true);
    this.p99 = p99;
    setP99IsSet(true);
    this.p999 = p999;
    setP999IsSet(true);
    this.StdDev = StdDev;
    setStdDevIsSet(true);
    this.m15Rate = m15Rate;
    setM15RateIsSet(true);
    this.m1Rate = m1Rate;
    setM1RateIsSet(true);
    this.m5Rate = m5Rate;
    setM5RateIsSet(true);
    this.meanRate = meanRate;
    setMeanRateIsSet(true);
    this.durationUnits = durationUnits;
    this.rateUnits = rateUnits;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimerSnapshot(TimerSnapshot other) {
    __isset_bitfield = other.__isset_bitfield;
    this.count = other.count;
    this.max = other.max;
    this.mean = other.mean;
    this.min = other.min;
    this.p50 = other.p50;
    this.p75 = other.p75;
    this.p95 = other.p95;
    this.p98 = other.p98;
    this.p99 = other.p99;
    this.p999 = other.p999;
    if (other.isSetValues()) {
      List<Double> __this__values = new ArrayList<Double>(other.values);
      this.values = __this__values;
    }
    this.StdDev = other.StdDev;
    this.m15Rate = other.m15Rate;
    this.m1Rate = other.m1Rate;
    this.m5Rate = other.m5Rate;
    this.meanRate = other.meanRate;
    if (other.isSetDurationUnits()) {
      this.durationUnits = other.durationUnits;
    }
    if (other.isSetRateUnits()) {
      this.rateUnits = other.rateUnits;
    }
  }

  public TimerSnapshot deepCopy() {
    return new TimerSnapshot(this);
  }

  @Override
  public void clear() {
    setCountIsSet(false);
    this.count = 0;
    setMaxIsSet(false);
    this.max = 0.0;
    setMeanIsSet(false);
    this.mean = 0.0;
    setMinIsSet(false);
    this.min = 0.0;
    setP50IsSet(false);
    this.p50 = 0.0;
    setP75IsSet(false);
    this.p75 = 0.0;
    setP95IsSet(false);
    this.p95 = 0.0;
    setP98IsSet(false);
    this.p98 = 0.0;
    setP99IsSet(false);
    this.p99 = 0.0;
    setP999IsSet(false);
    this.p999 = 0.0;
    this.values = null;
    setStdDevIsSet(false);
    this.StdDev = 0.0;
    setM15RateIsSet(false);
    this.m15Rate = 0.0;
    setM1RateIsSet(false);
    this.m1Rate = 0.0;
    setM5RateIsSet(false);
    this.m5Rate = 0.0;
    setMeanRateIsSet(false);
    this.meanRate = 0.0;
    this.durationUnits = null;
    this.rateUnits = null;
  }

  public long getCount() {
    return this.count;
  }

  public TimerSnapshot setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public double getMax() {
    return this.max;
  }

  public TimerSnapshot setMax(double max) {
    this.max = max;
    setMaxIsSet(true);
    return this;
  }

  public void unsetMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public double getMean() {
    return this.mean;
  }

  public TimerSnapshot setMean(double mean) {
    this.mean = mean;
    setMeanIsSet(true);
    return this;
  }

  public void unsetMean() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEAN_ISSET_ID);
  }

  /** Returns true if field mean is set (has been assigned a value) and false otherwise */
  public boolean isSetMean() {
    return EncodingUtils.testBit(__isset_bitfield, __MEAN_ISSET_ID);
  }

  public void setMeanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEAN_ISSET_ID, value);
  }

  public double getMin() {
    return this.min;
  }

  public TimerSnapshot setMin(double min) {
    this.min = min;
    setMinIsSet(true);
    return this;
  }

  public void unsetMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void setMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public double getP50() {
    return this.p50;
  }

  public TimerSnapshot setP50(double p50) {
    this.p50 = p50;
    setP50IsSet(true);
    return this;
  }

  public void unsetP50() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P50_ISSET_ID);
  }

  /** Returns true if field p50 is set (has been assigned a value) and false otherwise */
  public boolean isSetP50() {
    return EncodingUtils.testBit(__isset_bitfield, __P50_ISSET_ID);
  }

  public void setP50IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P50_ISSET_ID, value);
  }

  public double getP75() {
    return this.p75;
  }

  public TimerSnapshot setP75(double p75) {
    this.p75 = p75;
    setP75IsSet(true);
    return this;
  }

  public void unsetP75() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P75_ISSET_ID);
  }

  /** Returns true if field p75 is set (has been assigned a value) and false otherwise */
  public boolean isSetP75() {
    return EncodingUtils.testBit(__isset_bitfield, __P75_ISSET_ID);
  }

  public void setP75IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P75_ISSET_ID, value);
  }

  public double getP95() {
    return this.p95;
  }

  public TimerSnapshot setP95(double p95) {
    this.p95 = p95;
    setP95IsSet(true);
    return this;
  }

  public void unsetP95() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P95_ISSET_ID);
  }

  /** Returns true if field p95 is set (has been assigned a value) and false otherwise */
  public boolean isSetP95() {
    return EncodingUtils.testBit(__isset_bitfield, __P95_ISSET_ID);
  }

  public void setP95IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P95_ISSET_ID, value);
  }

  public double getP98() {
    return this.p98;
  }

  public TimerSnapshot setP98(double p98) {
    this.p98 = p98;
    setP98IsSet(true);
    return this;
  }

  public void unsetP98() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P98_ISSET_ID);
  }

  /** Returns true if field p98 is set (has been assigned a value) and false otherwise */
  public boolean isSetP98() {
    return EncodingUtils.testBit(__isset_bitfield, __P98_ISSET_ID);
  }

  public void setP98IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P98_ISSET_ID, value);
  }

  public double getP99() {
    return this.p99;
  }

  public TimerSnapshot setP99(double p99) {
    this.p99 = p99;
    setP99IsSet(true);
    return this;
  }

  public void unsetP99() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P99_ISSET_ID);
  }

  /** Returns true if field p99 is set (has been assigned a value) and false otherwise */
  public boolean isSetP99() {
    return EncodingUtils.testBit(__isset_bitfield, __P99_ISSET_ID);
  }

  public void setP99IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P99_ISSET_ID, value);
  }

  public double getP999() {
    return this.p999;
  }

  public TimerSnapshot setP999(double p999) {
    this.p999 = p999;
    setP999IsSet(true);
    return this;
  }

  public void unsetP999() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P999_ISSET_ID);
  }

  /** Returns true if field p999 is set (has been assigned a value) and false otherwise */
  public boolean isSetP999() {
    return EncodingUtils.testBit(__isset_bitfield, __P999_ISSET_ID);
  }

  public void setP999IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P999_ISSET_ID, value);
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<Double> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(double elem) {
    if (this.values == null) {
      this.values = new ArrayList<Double>();
    }
    this.values.add(elem);
  }

  public List<Double> getValues() {
    return this.values;
  }

  public TimerSnapshot setValues(List<Double> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public double getStdDev() {
    return this.StdDev;
  }

  public TimerSnapshot setStdDev(double StdDev) {
    this.StdDev = StdDev;
    setStdDevIsSet(true);
    return this;
  }

  public void unsetStdDev() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STDDEV_ISSET_ID);
  }

  /** Returns true if field StdDev is set (has been assigned a value) and false otherwise */
  public boolean isSetStdDev() {
    return EncodingUtils.testBit(__isset_bitfield, __STDDEV_ISSET_ID);
  }

  public void setStdDevIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STDDEV_ISSET_ID, value);
  }

  public double getM15Rate() {
    return this.m15Rate;
  }

  public TimerSnapshot setM15Rate(double m15Rate) {
    this.m15Rate = m15Rate;
    setM15RateIsSet(true);
    return this;
  }

  public void unsetM15Rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __M15RATE_ISSET_ID);
  }

  /** Returns true if field m15Rate is set (has been assigned a value) and false otherwise */
  public boolean isSetM15Rate() {
    return EncodingUtils.testBit(__isset_bitfield, __M15RATE_ISSET_ID);
  }

  public void setM15RateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __M15RATE_ISSET_ID, value);
  }

  public double getM1Rate() {
    return this.m1Rate;
  }

  public TimerSnapshot setM1Rate(double m1Rate) {
    this.m1Rate = m1Rate;
    setM1RateIsSet(true);
    return this;
  }

  public void unsetM1Rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __M1RATE_ISSET_ID);
  }

  /** Returns true if field m1Rate is set (has been assigned a value) and false otherwise */
  public boolean isSetM1Rate() {
    return EncodingUtils.testBit(__isset_bitfield, __M1RATE_ISSET_ID);
  }

  public void setM1RateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __M1RATE_ISSET_ID, value);
  }

  public double getM5Rate() {
    return this.m5Rate;
  }

  public TimerSnapshot setM5Rate(double m5Rate) {
    this.m5Rate = m5Rate;
    setM5RateIsSet(true);
    return this;
  }

  public void unsetM5Rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __M5RATE_ISSET_ID);
  }

  /** Returns true if field m5Rate is set (has been assigned a value) and false otherwise */
  public boolean isSetM5Rate() {
    return EncodingUtils.testBit(__isset_bitfield, __M5RATE_ISSET_ID);
  }

  public void setM5RateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __M5RATE_ISSET_ID, value);
  }

  public double getMeanRate() {
    return this.meanRate;
  }

  public TimerSnapshot setMeanRate(double meanRate) {
    this.meanRate = meanRate;
    setMeanRateIsSet(true);
    return this;
  }

  public void unsetMeanRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEANRATE_ISSET_ID);
  }

  /** Returns true if field meanRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMeanRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MEANRATE_ISSET_ID);
  }

  public void setMeanRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEANRATE_ISSET_ID, value);
  }

  public String getDurationUnits() {
    return this.durationUnits;
  }

  public TimerSnapshot setDurationUnits(String durationUnits) {
    this.durationUnits = durationUnits;
    return this;
  }

  public void unsetDurationUnits() {
    this.durationUnits = null;
  }

  /** Returns true if field durationUnits is set (has been assigned a value) and false otherwise */
  public boolean isSetDurationUnits() {
    return this.durationUnits != null;
  }

  public void setDurationUnitsIsSet(boolean value) {
    if (!value) {
      this.durationUnits = null;
    }
  }

  public String getRateUnits() {
    return this.rateUnits;
  }

  public TimerSnapshot setRateUnits(String rateUnits) {
    this.rateUnits = rateUnits;
    return this;
  }

  public void unsetRateUnits() {
    this.rateUnits = null;
  }

  /** Returns true if field rateUnits is set (has been assigned a value) and false otherwise */
  public boolean isSetRateUnits() {
    return this.rateUnits != null;
  }

  public void setRateUnitsIsSet(boolean value) {
    if (!value) {
      this.rateUnits = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Long)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Double)value);
      }
      break;

    case MEAN:
      if (value == null) {
        unsetMean();
      } else {
        setMean((Double)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Double)value);
      }
      break;

    case P50:
      if (value == null) {
        unsetP50();
      } else {
        setP50((Double)value);
      }
      break;

    case P75:
      if (value == null) {
        unsetP75();
      } else {
        setP75((Double)value);
      }
      break;

    case P95:
      if (value == null) {
        unsetP95();
      } else {
        setP95((Double)value);
      }
      break;

    case P98:
      if (value == null) {
        unsetP98();
      } else {
        setP98((Double)value);
      }
      break;

    case P99:
      if (value == null) {
        unsetP99();
      } else {
        setP99((Double)value);
      }
      break;

    case P999:
      if (value == null) {
        unsetP999();
      } else {
        setP999((Double)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((List<Double>)value);
      }
      break;

    case STD_DEV:
      if (value == null) {
        unsetStdDev();
      } else {
        setStdDev((Double)value);
      }
      break;

    case M15_RATE:
      if (value == null) {
        unsetM15Rate();
      } else {
        setM15Rate((Double)value);
      }
      break;

    case M1_RATE:
      if (value == null) {
        unsetM1Rate();
      } else {
        setM1Rate((Double)value);
      }
      break;

    case M5_RATE:
      if (value == null) {
        unsetM5Rate();
      } else {
        setM5Rate((Double)value);
      }
      break;

    case MEAN_RATE:
      if (value == null) {
        unsetMeanRate();
      } else {
        setMeanRate((Double)value);
      }
      break;

    case DURATION_UNITS:
      if (value == null) {
        unsetDurationUnits();
      } else {
        setDurationUnits((String)value);
      }
      break;

    case RATE_UNITS:
      if (value == null) {
        unsetRateUnits();
      } else {
        setRateUnits((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNT:
      return Long.valueOf(getCount());

    case MAX:
      return Double.valueOf(getMax());

    case MEAN:
      return Double.valueOf(getMean());

    case MIN:
      return Double.valueOf(getMin());

    case P50:
      return Double.valueOf(getP50());

    case P75:
      return Double.valueOf(getP75());

    case P95:
      return Double.valueOf(getP95());

    case P98:
      return Double.valueOf(getP98());

    case P99:
      return Double.valueOf(getP99());

    case P999:
      return Double.valueOf(getP999());

    case VALUES:
      return getValues();

    case STD_DEV:
      return Double.valueOf(getStdDev());

    case M15_RATE:
      return Double.valueOf(getM15Rate());

    case M1_RATE:
      return Double.valueOf(getM1Rate());

    case M5_RATE:
      return Double.valueOf(getM5Rate());

    case MEAN_RATE:
      return Double.valueOf(getMeanRate());

    case DURATION_UNITS:
      return getDurationUnits();

    case RATE_UNITS:
      return getRateUnits();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNT:
      return isSetCount();
    case MAX:
      return isSetMax();
    case MEAN:
      return isSetMean();
    case MIN:
      return isSetMin();
    case P50:
      return isSetP50();
    case P75:
      return isSetP75();
    case P95:
      return isSetP95();
    case P98:
      return isSetP98();
    case P99:
      return isSetP99();
    case P999:
      return isSetP999();
    case VALUES:
      return isSetValues();
    case STD_DEV:
      return isSetStdDev();
    case M15_RATE:
      return isSetM15Rate();
    case M1_RATE:
      return isSetM1Rate();
    case M5_RATE:
      return isSetM5Rate();
    case MEAN_RATE:
      return isSetMeanRate();
    case DURATION_UNITS:
      return isSetDurationUnits();
    case RATE_UNITS:
      return isSetRateUnits();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimerSnapshot)
      return this.equals((TimerSnapshot)that);
    return false;
  }

  public boolean equals(TimerSnapshot that) {
    if (that == null)
      return false;

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_max = true;
    boolean that_present_max = true;
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (this.max != that.max)
        return false;
    }

    boolean this_present_mean = true;
    boolean that_present_mean = true;
    if (this_present_mean || that_present_mean) {
      if (!(this_present_mean && that_present_mean))
        return false;
      if (this.mean != that.mean)
        return false;
    }

    boolean this_present_min = true;
    boolean that_present_min = true;
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (this.min != that.min)
        return false;
    }

    boolean this_present_p50 = true;
    boolean that_present_p50 = true;
    if (this_present_p50 || that_present_p50) {
      if (!(this_present_p50 && that_present_p50))
        return false;
      if (this.p50 != that.p50)
        return false;
    }

    boolean this_present_p75 = true;
    boolean that_present_p75 = true;
    if (this_present_p75 || that_present_p75) {
      if (!(this_present_p75 && that_present_p75))
        return false;
      if (this.p75 != that.p75)
        return false;
    }

    boolean this_present_p95 = true;
    boolean that_present_p95 = true;
    if (this_present_p95 || that_present_p95) {
      if (!(this_present_p95 && that_present_p95))
        return false;
      if (this.p95 != that.p95)
        return false;
    }

    boolean this_present_p98 = true;
    boolean that_present_p98 = true;
    if (this_present_p98 || that_present_p98) {
      if (!(this_present_p98 && that_present_p98))
        return false;
      if (this.p98 != that.p98)
        return false;
    }

    boolean this_present_p99 = true;
    boolean that_present_p99 = true;
    if (this_present_p99 || that_present_p99) {
      if (!(this_present_p99 && that_present_p99))
        return false;
      if (this.p99 != that.p99)
        return false;
    }

    boolean this_present_p999 = true;
    boolean that_present_p999 = true;
    if (this_present_p999 || that_present_p999) {
      if (!(this_present_p999 && that_present_p999))
        return false;
      if (this.p999 != that.p999)
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    boolean this_present_StdDev = true;
    boolean that_present_StdDev = true;
    if (this_present_StdDev || that_present_StdDev) {
      if (!(this_present_StdDev && that_present_StdDev))
        return false;
      if (this.StdDev != that.StdDev)
        return false;
    }

    boolean this_present_m15Rate = true;
    boolean that_present_m15Rate = true;
    if (this_present_m15Rate || that_present_m15Rate) {
      if (!(this_present_m15Rate && that_present_m15Rate))
        return false;
      if (this.m15Rate != that.m15Rate)
        return false;
    }

    boolean this_present_m1Rate = true;
    boolean that_present_m1Rate = true;
    if (this_present_m1Rate || that_present_m1Rate) {
      if (!(this_present_m1Rate && that_present_m1Rate))
        return false;
      if (this.m1Rate != that.m1Rate)
        return false;
    }

    boolean this_present_m5Rate = true;
    boolean that_present_m5Rate = true;
    if (this_present_m5Rate || that_present_m5Rate) {
      if (!(this_present_m5Rate && that_present_m5Rate))
        return false;
      if (this.m5Rate != that.m5Rate)
        return false;
    }

    boolean this_present_meanRate = true;
    boolean that_present_meanRate = true;
    if (this_present_meanRate || that_present_meanRate) {
      if (!(this_present_meanRate && that_present_meanRate))
        return false;
      if (this.meanRate != that.meanRate)
        return false;
    }

    boolean this_present_durationUnits = true && this.isSetDurationUnits();
    boolean that_present_durationUnits = true && that.isSetDurationUnits();
    if (this_present_durationUnits || that_present_durationUnits) {
      if (!(this_present_durationUnits && that_present_durationUnits))
        return false;
      if (!this.durationUnits.equals(that.durationUnits))
        return false;
    }

    boolean this_present_rateUnits = true && this.isSetRateUnits();
    boolean that_present_rateUnits = true && that.isSetRateUnits();
    if (this_present_rateUnits || that_present_rateUnits) {
      if (!(this_present_rateUnits && that_present_rateUnits))
        return false;
      if (!this.rateUnits.equals(that.rateUnits))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TimerSnapshot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMean()).compareTo(other.isSetMean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mean, other.mean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP50()).compareTo(other.isSetP50());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP50()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p50, other.p50);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP75()).compareTo(other.isSetP75());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP75()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p75, other.p75);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP95()).compareTo(other.isSetP95());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP95()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p95, other.p95);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP98()).compareTo(other.isSetP98());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP98()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p98, other.p98);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP99()).compareTo(other.isSetP99());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP99()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p99, other.p99);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP999()).compareTo(other.isSetP999());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP999()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p999, other.p999);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStdDev()).compareTo(other.isSetStdDev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdDev()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StdDev, other.StdDev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM15Rate()).compareTo(other.isSetM15Rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM15Rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m15Rate, other.m15Rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM1Rate()).compareTo(other.isSetM1Rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM1Rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m1Rate, other.m1Rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM5Rate()).compareTo(other.isSetM5Rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM5Rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m5Rate, other.m5Rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeanRate()).compareTo(other.isSetMeanRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeanRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meanRate, other.meanRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurationUnits()).compareTo(other.isSetDurationUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurationUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durationUnits, other.durationUnits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRateUnits()).compareTo(other.isSetRateUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rateUnits, other.rateUnits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimerSnapshot(");
    boolean first = true;

    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max:");
    sb.append(this.max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mean:");
    sb.append(this.mean);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min:");
    sb.append(this.min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p50:");
    sb.append(this.p50);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p75:");
    sb.append(this.p75);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p95:");
    sb.append(this.p95);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p98:");
    sb.append(this.p98);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p99:");
    sb.append(this.p99);
    first = false;
    if (!first) sb.append(", ");
    sb.append("p999:");
    sb.append(this.p999);
    first = false;
    if (isSetValues()) {
      if (!first) sb.append(", ");
      sb.append("values:");
      if (this.values == null) {
        sb.append("null");
      } else {
        sb.append(this.values);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("StdDev:");
    sb.append(this.StdDev);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m15Rate:");
    sb.append(this.m15Rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m1Rate:");
    sb.append(this.m1Rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("m5Rate:");
    sb.append(this.m5Rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meanRate:");
    sb.append(this.meanRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("durationUnits:");
    if (this.durationUnits == null) {
      sb.append("null");
    } else {
      sb.append(this.durationUnits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateUnits:");
    if (this.rateUnits == null) {
      sb.append("null");
    } else {
      sb.append(this.rateUnits);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mean' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'min' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'p50' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'p75' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'p95' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'p98' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'p99' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'p999' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'StdDev' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'm15Rate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'm1Rate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'm5Rate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'meanRate' because it's a primitive and you chose the non-beans generator.
    if (durationUnits == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'durationUnits' was not present! Struct: " + toString());
    }
    if (rateUnits == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rateUnits' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimerSnapshotStandardSchemeFactory implements SchemeFactory {
    public TimerSnapshotStandardScheme getScheme() {
      return new TimerSnapshotStandardScheme();
    }
  }

  private static class TimerSnapshotStandardScheme extends StandardScheme<TimerSnapshot> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimerSnapshot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count = iprot.readI64();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max = iprot.readDouble();
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mean = iprot.readDouble();
              struct.setMeanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.min = iprot.readDouble();
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // P50
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p50 = iprot.readDouble();
              struct.setP50IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // P75
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p75 = iprot.readDouble();
              struct.setP75IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // P95
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p95 = iprot.readDouble();
              struct.setP95IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // P98
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p98 = iprot.readDouble();
              struct.setP98IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // P99
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p99 = iprot.readDouble();
              struct.setP99IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // P999
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p999 = iprot.readDouble();
              struct.setP999IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.values = new ArrayList<Double>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  double _elem10;
                  _elem10 = iprot.readDouble();
                  struct.values.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STD_DEV
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.StdDev = iprot.readDouble();
              struct.setStdDevIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // M15_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.m15Rate = iprot.readDouble();
              struct.setM15RateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // M1_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.m1Rate = iprot.readDouble();
              struct.setM1RateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // M5_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.m5Rate = iprot.readDouble();
              struct.setM5RateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MEAN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.meanRate = iprot.readDouble();
              struct.setMeanRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DURATION_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.durationUnits = iprot.readString();
              struct.setDurationUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RATE_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rateUnits = iprot.readString();
              struct.setRateUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMean()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mean' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMin()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'min' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetP50()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p50' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetP75()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p75' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetP95()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p95' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetP98()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p98' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetP99()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p99' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetP999()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'p999' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStdDev()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'StdDev' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetM15Rate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'm15Rate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetM1Rate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'm1Rate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetM5Rate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'm5Rate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMeanRate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meanRate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimerSnapshot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI64(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      oprot.writeDouble(struct.max);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEAN_FIELD_DESC);
      oprot.writeDouble(struct.mean);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_FIELD_DESC);
      oprot.writeDouble(struct.min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P50_FIELD_DESC);
      oprot.writeDouble(struct.p50);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P75_FIELD_DESC);
      oprot.writeDouble(struct.p75);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P95_FIELD_DESC);
      oprot.writeDouble(struct.p95);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P98_FIELD_DESC);
      oprot.writeDouble(struct.p98);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P99_FIELD_DESC);
      oprot.writeDouble(struct.p99);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P999_FIELD_DESC);
      oprot.writeDouble(struct.p999);
      oprot.writeFieldEnd();
      if (struct.values != null) {
        if (struct.isSetValues()) {
          oprot.writeFieldBegin(VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.values.size()));
            for (double _iter11 : struct.values)
            {
              oprot.writeDouble(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(STD_DEV_FIELD_DESC);
      oprot.writeDouble(struct.StdDev);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M15_RATE_FIELD_DESC);
      oprot.writeDouble(struct.m15Rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M1_RATE_FIELD_DESC);
      oprot.writeDouble(struct.m1Rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(M5_RATE_FIELD_DESC);
      oprot.writeDouble(struct.m5Rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEAN_RATE_FIELD_DESC);
      oprot.writeDouble(struct.meanRate);
      oprot.writeFieldEnd();
      if (struct.durationUnits != null) {
        oprot.writeFieldBegin(DURATION_UNITS_FIELD_DESC);
        oprot.writeString(struct.durationUnits);
        oprot.writeFieldEnd();
      }
      if (struct.rateUnits != null) {
        oprot.writeFieldBegin(RATE_UNITS_FIELD_DESC);
        oprot.writeString(struct.rateUnits);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimerSnapshotTupleSchemeFactory implements SchemeFactory {
    public TimerSnapshotTupleScheme getScheme() {
      return new TimerSnapshotTupleScheme();
    }
  }

  private static class TimerSnapshotTupleScheme extends TupleScheme<TimerSnapshot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimerSnapshot struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.count);
      oprot.writeDouble(struct.max);
      oprot.writeDouble(struct.mean);
      oprot.writeDouble(struct.min);
      oprot.writeDouble(struct.p50);
      oprot.writeDouble(struct.p75);
      oprot.writeDouble(struct.p95);
      oprot.writeDouble(struct.p98);
      oprot.writeDouble(struct.p99);
      oprot.writeDouble(struct.p999);
      oprot.writeDouble(struct.StdDev);
      oprot.writeDouble(struct.m15Rate);
      oprot.writeDouble(struct.m1Rate);
      oprot.writeDouble(struct.m5Rate);
      oprot.writeDouble(struct.meanRate);
      oprot.writeString(struct.durationUnits);
      oprot.writeString(struct.rateUnits);
      BitSet optionals = new BitSet();
      if (struct.isSetValues()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (double _iter12 : struct.values)
          {
            oprot.writeDouble(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimerSnapshot struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.count = iprot.readI64();
      struct.setCountIsSet(true);
      struct.max = iprot.readDouble();
      struct.setMaxIsSet(true);
      struct.mean = iprot.readDouble();
      struct.setMeanIsSet(true);
      struct.min = iprot.readDouble();
      struct.setMinIsSet(true);
      struct.p50 = iprot.readDouble();
      struct.setP50IsSet(true);
      struct.p75 = iprot.readDouble();
      struct.setP75IsSet(true);
      struct.p95 = iprot.readDouble();
      struct.setP95IsSet(true);
      struct.p98 = iprot.readDouble();
      struct.setP98IsSet(true);
      struct.p99 = iprot.readDouble();
      struct.setP99IsSet(true);
      struct.p999 = iprot.readDouble();
      struct.setP999IsSet(true);
      struct.StdDev = iprot.readDouble();
      struct.setStdDevIsSet(true);
      struct.m15Rate = iprot.readDouble();
      struct.setM15RateIsSet(true);
      struct.m1Rate = iprot.readDouble();
      struct.setM1RateIsSet(true);
      struct.m5Rate = iprot.readDouble();
      struct.setM5RateIsSet(true);
      struct.meanRate = iprot.readDouble();
      struct.setMeanRateIsSet(true);
      struct.durationUnits = iprot.readString();
      struct.setDurationUnitsIsSet(true);
      struct.rateUnits = iprot.readString();
      struct.setRateUnitsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.values = new ArrayList<Double>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            double _elem15;
            _elem15 = iprot.readDouble();
            struct.values.add(_elem15);
          }
        }
        struct.setValuesIsSet(true);
      }
    }
  }

}

